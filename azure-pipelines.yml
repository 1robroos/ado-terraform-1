# See https://onedrive.live.com/redir?resid=7AFAA849794F34C8%21134&page=Edit&wd=target%28Azure%20Devops.one%7Cae1f2799-c12d-4b89-93a3-07c08b68ee3c%2Fsimplify%7C713bc2d8-1480-4e5b-b9f2-051d9a9ce043%2F%29&wdorigin=703
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: name  # defaults for any parameters that aren't specified
    default: ''
  - name: vmImage
    default: ''
  

variables:
  - name: System.Debug
    value: true  
  - name: TF_VAR_app_name
    value: "kfsolapp"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: TF_VAR_region
    value: "us-east-1"
  - name: AWS_REGION
    value: "us-east-1"
  - name: BRANCH_NAME
    value: $(Build.SourceBranchName)

# trigger:
# - dev
trigger: 
  branches: 
    include: 
    - dev
    - stg
    - prd

pool:
  vmImage: 'ubuntu-latest'

steps:
  # prepares files and folders for this stage and prepares aws S3 buckets for terraform state file with Cloudformation.
  - template: preps/azure-pipelines.yml
    parameters:
      TF_VAR_app_name: $(TF_VAR_app_name)
      BRANCH_NAME: $(BRANCH_NAME)
      TF_VAR_region: $(TF_VAR_region)

            
  # Let's lint before doing anything further that consumes unneeded energy.
  - task: AWSShellScript@1
    inputs:
      awsCredentials: 'aws-AzureDevopsiamuser'
      regionName: 'us-east-1'
      arguments: '$(TF_VAR_app_name) $(TF_VAR_region) $(BRANCH_NAME)'
      scriptType: 'inline'
      inlineScript: |
        echo args are $1 $2 $3
        export TF_VAR_app_name=$1
        export TF_VAR_region=$2
        export BRANCH_NAME=$3
        cd "${BRANCH_NAME}"/ || exit
        echo pwd is $PWD        
        echo "STARTING tflint for checking scripts in dir $BRANCH_NAME "
        ls -la
        echo
        ./tflint --init
        RCLINT=$0
        if [ $RCLINT != 0 ]
        then
          echo "tflint reports an error"
          exit 1
        else
          echo "All is fine for tflint to continu."
        fi
    name: tflint


  # terraform init
  - task: AWSShellScript@1
    inputs:
      awsCredentials: 'aws-AzureDevopsiamuser'
      regionName: 'us-east-1'
      arguments: '$(TF_VAR_app_name) $(TF_VAR_region) $(BRANCH_NAME)'
      scriptType: 'inline'
      inlineScript: |
        echo args are $1 $2 $3
        export TF_VAR_app_name=$1
        export TF_VAR_region=$2
        export BRANCH_NAME=$3
        cd "${BRANCH_NAME}"/ || exit
        echo pwd is $PWD        
        echo "STARTING TERRAFORM INIT"
        TF_IN_AUTOMATION=yes
        terraform init
    name: terraforminit

  # teraform plan
  - task: AWSShellScript@1
    inputs:
      awsCredentials: 'aws-AzureDevopsiamuser'
      regionName: 'us-east-1'
      arguments: '$(TF_VAR_app_name) $(TF_VAR_region) $(BRANCH_NAME)'
      scriptType: 'inline'
      inlineScript: |
        echo args are $1 $2 $3
        export TF_VAR_app_name=$1
        export TF_VAR_region=$2
        export BRANCH_NAME=$3
        cd "${BRANCH_NAME}"/ || exit    
        echo "STARTING TERRAFORM PLAN"
        OUTPUT=$(terraform plan -out="./out_plan_file" -var environment="${BRANCH_NAME}" -input=false -detailed-exitcode)
              OUT=$?
              echo "##vso[task.setvariable variable=terraform_plan_exitcode;isOutput=true]$OUT"
              echo "the terraform plan exitcode is $OUT"
              if [ $OUT -eq 0 ];then
                  echo "No changes. Infrastructure is up-to-date!"
                  sleep 1
              elif [ $OUT -eq 1 ];then
                  echo "Terraform planned has failed!"
                  sleep 1
                  exit 1
              elif [ $OUT -eq 2 ];then
                  echo "Changes have been noticed!"
                  sleep 1
                  terraform show ./out_plan_file
              else
                  echo "Terraform planned has failed!"
                  exit 1
              fi
    name: terraformplan

  - bash: |  
      echo  SHow IN SAME JOB the output variable terraform_plan_exitcode  is "$(terraformplan.terraform_plan_exitcode)"   
    displayName: Show terraform_plan_exitcode in same job

  - bash: |  
      echo  SHow files
      pwd
      ls -la
      echo
      ls -la dev   
      echo show tree
      tree
    displayName: Show files

    # You can organize pipeline jobs into stages. Stages are the major divisions in a pipeline: 
    #   "build this app", "run these tests", and "deploy to pre-production" are good examples of stages. 
    # They are logical boundaries in your pipeline where you can pause the pipeline and perform various checks.
    # Every pipeline has at least one stage even if you do not explicitly define it. 
    # You can also arrange stages into a dependency graph so that one stage runs before another one. There is a limit of 256 jobs for a stage.


  - task: AWSShellScript@1
    inputs:
      awsCredentials: 'aws-AzureDevopsiamuser'
      regionName: 'eu-central-1'
      arguments: '$(TF_VAR_app_name) $(TF_VAR_region) $(BRANCH_NAME)'
      scriptType: 'inline'
      inlineScript: |
        #  You can write your script inline here
        echo  SHow output variable terraform_plan_exitcode  is "$(terraformplan.terraform_plan_exitcode)"
        cd "${BRANCH_NAME}"/ || exit  
        TF_IN_AUTOMATION=yes
        # OUT=$(terraform apply  -input=false ./out_plan_file)
        # OUT=$?
        #       echo "the terraform plan exitcode is $OUT"
        #       #OUT=2 # force it for testing
              if [ "$(terraformplan.terraform_plan_exitcode)" -eq 0 ];then
                  echo "Terraform apply will not run because terraform plan has no changes."
              elif [ "$(terraformplan.terraform_plan_exitcode)" -eq 1 ];then
                  echo "Terraform apply will not run because terraform plan has failed!"
                  exit 1
              elif [ "$(terraformplan.terraform_plan_exitcode)" -eq 2 ];then
                  echo "Changes have been noticed by terraform plan! I will show you: "
                  terraform show ./out_plan_file
                  echo
                  echo
                  echo "Now apply will run:"
                  terraform apply  -input=false ./out_plan_file
              else
                  echo "Terraform apply has failed! THis is else."
                  exit 1
              fi
    name: terraformapply
    
  # - task: AWSShellScript@1
  #   inputs:
  #     awsCredentials: 'aws-AzureDevopsiamuser'
  #     regionName: 'eu-central-1'
  #     arguments: '$(TF_VAR_app_name) $(TF_VAR_region) $(BRANCH_NAME)'
  #     scriptType: 'inline'
  #     inlineScript: |
  #       #  You can write your script inline here
  #       echo doit
  #       echo  SHow IN OTHER STAGE the output variable terraform_plan_exitcode  is "$(terraformplan.terraform_plan_exitcode)"
  #       cd "${BRANCH_NAME}"/ || exit  
  #       TF_IN_AUTOMATION=yes
  #       OUT=$(terraform apply  -input=false ./out_plan_file)
  #       OUT=$?
  #             echo "the terraform plan exitcode is $OUT"
  #             #OUT=2 # force it for testing
  #             if [ $OUT -eq 0 ];then
  #                 echo "Terraform apply should have run correctly!"
  #                 sleep 1
  #             elif [ $OUT -eq 1 ];then
  #                 echo "Terraform apply has failed!"
  #                 sleep 1
  #                 exit 1
  #             elif [ $OUT -eq 2 ];then
  #                 echo "Changes have been noticed!"
  #                 echo "##vso[task.setvariable variable=terraform_plan_exitcode;isOutput=true]$OUT"
  #                 sleep 1
  #                 terraform show ./out_plan_file
  #             else
  #                 echo "Terraform apply has failed! THis is else. OUT=$OUT"
  #                 exit 1
  #             fi
  #   name: terraformapply
                    
  # - task: AWSShellScript@1
  #     condition: eq(stageDependencies.Build.Terraform_Plan.outputs['TerraformPLanVar.terraform_plan_exitcode'], '2')
  #     variables:
  #       varBuildStage: $[stageDependencies.Build.Terraform_Plan.outputs['TerraformPLanVar.terraform_plan_exitcode']] 
  #     displayName: Deployment job in the staging env
  #     strategy:
  #     # default deployment strategy
  #       runOnce:
  #         deploy:
  #           steps:
  #             - bash: |  
  #                 echo  SHow IN OTHER STAGE the output variable terraform_plan_exitcode  is $(varBuildStage)
  #               displayName: Show terraform_plan_exitcode in other stage
  #             - script: echo terraform apply "./out_plan_file"
  #               displayName: "- Terraform Apply"

